import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on 31/03/2012, 05:27:42 ã
 */
/**
 * 
 * @author Mahmoud El-Maghraby
 */
public class MainWindow extends javax.swing.JFrame
{

	/** Creates new form MainWindow */
	public MainWindow()
	{
		initComponents();
	}

	private MathematicalExpression func;
	private SolveEquation solve;
	private Parser parser;
	private double xAxis[][];
	private double yAxis[][];

	private int pointer;
	private ArrayList<double[]> xData;
	private ArrayList<MathematicalExpression> interData;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents()
	{

		functionField = new javax.swing.JTextField();
		plottingPanel = new javax.swing.JPanel();
		fixedPtLabel = new javax.swing.JLabel();
		rootFindingLabel = new javax.swing.JLabel();
		newtonPoly = new javax.swing.JRadioButton();
		fixedPoint = new javax.swing.JRadioButton();
		bisection = new javax.swing.JRadioButton();
		falsePosition = new javax.swing.JRadioButton();
		newtonRaphson = new javax.swing.JRadioButton();
		secant = new javax.swing.JRadioButton();
		lagrangePoly = new javax.swing.JRadioButton();
		removePoint = new javax.swing.JButton();
		addPoint = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		table = new javax.swing.JTable();
		zoomOut = new javax.swing.JButton();
		zoomIn = new javax.swing.JButton();
		polynomialInterpolationLabel1 = new javax.swing.JLabel();
		errorLabel = new javax.swing.JLabel();
		finalPointLabel = new javax.swing.JLabel();
		percision = new javax.swing.JLabel();
		MaximumIterations = new javax.swing.JLabel();
		initialPointLabel = new javax.swing.JLabel();
		tableTitle = new javax.swing.JLabel();
		initialPtText = new javax.swing.JTextField();
		finalPtText = new javax.swing.JTextField();
		precisionText = new javax.swing.JTextField();
		maxItrText = new javax.swing.JTextField();
		fileread = new javax.swing.JButton();
		errorText = new javax.swing.JTextField();
		tableLabel = new javax.swing.JLabel();
		input = new javax.swing.JLabel();
		ExcutionTime = new javax.swing.JLabel();
		NumOfItrs = new javax.swing.JLabel();
		resultErrorLabel = new javax.swing.JLabel();
		evaluate = new javax.swing.JButton();
		resultArea = new javax.swing.JTextArea();
		nextIteration = new javax.swing.JButton();
		prevIteration = new javax.swing.JButton();
		evaluate1 = new javax.swing.JButton();
		background = new javax.swing.JLabel();

		zoomOut.setBackground(new java.awt.Color(255, 255, 255));
		zoomOut.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
		zoomOut.setForeground(new java.awt.Color(153, 153, 153));
		zoomOut.setText("Zoom Out");
		zoomOut.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(204, 204, 204)));
		zoomOut.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				zoomOutActionPerformed(evt);
			}
		});
		getContentPane().add(zoomOut);
		zoomOut.setBounds(680, 495, 90, 25);

		zoomIn.setBackground(new java.awt.Color(255, 255, 255));
		zoomIn.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
		zoomIn.setForeground(new java.awt.Color(153, 153, 153));
		zoomIn.setText("Zoom In");
		zoomIn.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(204, 204, 204)));
		zoomIn.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				zoomInActionPerformed(evt);
			}
		});
		getContentPane().add(zoomIn);
		zoomIn.setBounds(550, 495, 90, 25);

		addPoint.setBackground(new java.awt.Color(255, 255, 255));
		addPoint.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		addPoint.setForeground(new java.awt.Color(243, 128, 0));
		addPoint.setText("Add Point");
		addPoint.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		addPoint.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				addPointActionPerformed(evt);
			}
		});
		getContentPane().add(addPoint);

		addPoint.setBounds(1120, 610, 90, 20);
		addPoint.setVisible(false);

		removePoint.setBackground(new java.awt.Color(255, 255, 255));
		removePoint.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		removePoint.setForeground(new java.awt.Color(243, 128, 0));
		removePoint.setText("Remove Point");
		removePoint.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		removePoint.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				removePointActionPerformed(evt);
			}
		});
		getContentPane().add(removePoint);
		removePoint.setBounds(1220, 610, 90, 20);
		removePoint.setVisible(false);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setBackground(new java.awt.Color(255, 255, 255));
		setMinimumSize(new java.awt.Dimension(1366, 725));
		setResizable(false);
		getContentPane().setLayout(null);

		functionField.setBorder(null);
		functionField.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				functionFieldActionPerformed(evt);
			}
		});
		getContentPane().add(functionField);
		functionField.setBounds(420, 82, 490, 20);

		plottingPanel.setBackground(new java.awt.Color(255, 255, 255));

		javax.swing.GroupLayout plottingPanelLayout = new javax.swing.GroupLayout(
				plottingPanel);
		plottingPanel.setLayout(plottingPanelLayout);
		plottingPanelLayout.setHorizontalGroup(plottingPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 680, Short.MAX_VALUE));
		plottingPanelLayout.setVerticalGroup(plottingPanelLayout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 300, Short.MAX_VALUE));

		getContentPane().add(plottingPanel);
		plottingPanel.setBounds(330, 195, 680, 300);

		fixedPtLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		fixedPtLabel.setForeground(new java.awt.Color(247, 128, 0));
		fixedPtLabel.setText("Fixed point iterations :");
		getContentPane().add(fixedPtLabel);
		fixedPtLabel.setBounds(20, 190, 240, 14);

		rootFindingLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		rootFindingLabel.setForeground(new java.awt.Color(247, 128, 0));
		rootFindingLabel.setText("Root finding operations :");
		getContentPane().add(rootFindingLabel);
		rootFindingLabel.setBounds(20, 300, 240, 14);

		newtonPoly.setBackground(new java.awt.Color(255, 255, 255));
		newtonPoly.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
		newtonPoly.setForeground(new java.awt.Color(153, 153, 153));
		newtonPoly.setActionCommand("actionCommand");
		newtonPoly.setLabel("Newton Polynomial");
		newtonPoly.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				newtonPolyActionPerformed(evt);
			}
		});
		getContentPane().add(newtonPoly);
		newtonPoly.setBounds(20, 570, 170, 23);
		newtonPoly.getAccessibleContext().setAccessibleName(
				"Lagrange Polynomial");

		fixedPoint.setBackground(new java.awt.Color(255, 255, 255));
		fixedPoint.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
		fixedPoint.setForeground(new java.awt.Color(153, 153, 153));
		fixedPoint.setActionCommand("actionCommand");
		fixedPoint.setLabel("find function fixed point");
		fixedPoint.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				fixedPointActionPerformed(evt);
			}
		});
		getContentPane().add(fixedPoint);
		fixedPoint.setBounds(20, 220, 170, 23);
		fixedPoint.setSelected(true);

		bisection.setBackground(new java.awt.Color(255, 255, 255));
		bisection.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
		bisection.setForeground(new java.awt.Color(153, 153, 153));
		bisection.setActionCommand("actionCommand");
		bisection.setLabel("Bisection Method");
		bisection.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				bisectionActionPerformed(evt);
			}
		});
		getContentPane().add(bisection);
		bisection.setBounds(20, 340, 170, 23);

		falsePosition.setBackground(new java.awt.Color(255, 255, 255));
		falsePosition.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
		falsePosition.setForeground(new java.awt.Color(153, 153, 153));
		falsePosition.setActionCommand("actionCommand");
		falsePosition.setLabel("False Position Method");
		falsePosition.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				falsePositionActionPerformed(evt);
			}
		});
		getContentPane().add(falsePosition);
		falsePosition.setBounds(20, 370, 170, 23);

		fileread.setBackground(new java.awt.Color(255, 255, 255));
		fileread.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
		fileread.setForeground(new java.awt.Color(243, 128, 0));
		fileread.setText("Read From File");
		fileread.setActionCommand("Solve");
		fileread.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		fileread.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				filereadActionPerformed(evt);
			}
		});
		getContentPane().add(fileread);
		fileread.setBounds(1070, 75, 130, 30);

		newtonRaphson.setBackground(new java.awt.Color(255, 255, 255));
		newtonRaphson.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
		newtonRaphson.setForeground(new java.awt.Color(153, 153, 153));
		newtonRaphson.setText("Newton Raphson Method");
		newtonRaphson.setActionCommand("actionCommand");
		newtonRaphson.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				newtonRaphsonActionPerformed(evt);
			}
		});
		getContentPane().add(newtonRaphson);
		newtonRaphson.setBounds(20, 400, 170, 23);

		secant.setBackground(new java.awt.Color(255, 255, 255));
		secant.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
		secant.setForeground(new java.awt.Color(153, 153, 153));
		secant.setText("Secant Method");
		secant.setActionCommand("actionCommand");
		secant.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				secantActionPerformed(evt);
			}
		});
		getContentPane().add(secant);
		secant.setBounds(20, 430, 170, 23);

		lagrangePoly.setBackground(new java.awt.Color(255, 255, 255));
		lagrangePoly.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
		lagrangePoly.setForeground(new java.awt.Color(153, 153, 153));
		lagrangePoly.setActionCommand("actionCommand");
		lagrangePoly.setLabel("Lagrange Polynomial");
		lagrangePoly.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				lagrangePolyActionPerformed(evt);
			}
		});
		getContentPane().add(lagrangePoly);
		lagrangePoly.setBounds(20, 545, 170, 23);

		jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
		jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

		table.setBorder(javax.swing.BorderFactory.createEtchedBorder());
		table.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {
				{ null, null }, { null, null } }, new String[] { "X", "F(X)" })
		{
			Class[] types = new Class[] { java.lang.Double.class,
					java.lang.Double.class };

			public Class getColumnClass(int columnIndex)
			{
				return types[columnIndex];
			}
		});
		table.setVisible(true);
		jScrollPane1.setViewportView(table);

		getContentPane().add(jScrollPane1);
		jScrollPane1.setBounds(1120, 370, 195, 230);
		jScrollPane1.setVisible(true);

		polynomialInterpolationLabel1.setFont(new java.awt.Font(
				"Times New Roman", 1, 12)); // NOI18N
		polynomialInterpolationLabel1.setForeground(new java.awt.Color(247,
				128, 0));
		polynomialInterpolationLabel1.setText("Polynomials Interpolation :");
		getContentPane().add(polynomialInterpolationLabel1);
		polynomialInterpolationLabel1.setBounds(20, 520, 240, 14);

		errorLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		errorLabel.setForeground(new java.awt.Color(247, 128, 0));
		errorLabel.setText("Error at x = ");
		getContentPane().add(errorLabel);
		errorLabel.setBounds(1120, 190, 80, 14);
		errorLabel.setVisible(false);

		finalPointLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		finalPointLabel.setForeground(new java.awt.Color(247, 128, 0));
		finalPointLabel.setText("Final Point   :");
		getContentPane().add(finalPointLabel);
		finalPointLabel.setBounds(1120, 222, 80, 14);

		percision.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		percision.setForeground(new java.awt.Color(247, 128, 0));
		percision.setText("Precision      :");
		getContentPane().add(percision);
		percision.setBounds(1120, 254, 80, 14);

		MaximumIterations.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		MaximumIterations.setForeground(new java.awt.Color(247, 128, 0));
		MaximumIterations.setText("Max Iters.     :");
		getContentPane().add(MaximumIterations);
		MaximumIterations.setBounds(1120, 284, 80, 14);

		initialPointLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		initialPointLabel.setForeground(new java.awt.Color(247, 128, 0));
		initialPointLabel.setText("Initial Point :");
		getContentPane().add(initialPointLabel);
		initialPointLabel.setBounds(1120, 190, 80, 14);

		tableTitle.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
		tableTitle.setForeground(new java.awt.Color(247, 128, 0));
		tableTitle.setText("Interpolating points :");
		getContentPane().add(tableTitle);
		tableTitle.setBounds(1120, 340, 190, 14);

		initialPtText.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
		initialPtText.setBorder(new javax.swing.border.LineBorder(
				new java.awt.Color(247, 128, 0), 1, true));
		initialPtText.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				initialPtTextActionPerformed(evt);
			}
		});
		getContentPane().add(initialPtText);
		initialPtText.setBounds(1210, 190, 90, 15);

		finalPtText.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
		finalPtText.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		getContentPane().add(finalPtText);
		finalPtText.setBounds(1210, 220, 90, 15);
		finalPointLabel.setVisible(false);
		finalPtText.setVisible(false);

		precisionText.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
		precisionText.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		getContentPane().add(precisionText);
		precisionText.setBounds(1210, 250, 90, 15);
		precisionText.setText("0.00001");

		maxItrText.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
		maxItrText.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		maxItrText.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				maxItrTextActionPerformed(evt);
			}
		});
		getContentPane().add(maxItrText);
		maxItrText.setBounds(1210, 280, 90, 15);
		maxItrText.setText("50");

		errorText.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		getContentPane().add(errorText);
		errorText.setBounds(1210, 190, 90, 16);
		errorText.setVisible(false);

		tableLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"table.png"))); // NOI18N
		getContentPane().add(tableLabel);
		tableLabel.setBounds(1110, 320, 213, 335);

		input.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"input.png"))); // NOI18N
		getContentPane().add(input);
		input.setBounds(1110, 150, 213, 162);

		ExcutionTime.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
		ExcutionTime.setText("Excution Time =");
		getContentPane().add(ExcutionTime);
		ExcutionTime.setBounds(330, 610, 230, 20);

		NumOfItrs.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
		NumOfItrs.setText("Num of Itrs . =");
		getContentPane().add(NumOfItrs);
		NumOfItrs.setBounds(570, 610, 210, 20);

		resultErrorLabel.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
		resultErrorLabel.setText(" Error at specified X =");
		getContentPane().add(resultErrorLabel);
		resultErrorLabel.setBounds(780, 610, 230, 20);
		resultErrorLabel.setVisible(false);

		evaluate.setBackground(new java.awt.Color(255, 255, 255));
		evaluate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
		evaluate.setForeground(new java.awt.Color(243, 128, 0));
		evaluate.setText("Solve");
		evaluate.setActionCommand("Solve");
		evaluate.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		evaluate.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				evaluateActionPerformed(evt);
			}
		});
		getContentPane().add(evaluate);
		evaluate.setBounds(980, 75, 70, 30);

		resultArea.setColumns(20);
		resultArea.setEditable(false);
		resultArea.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
		resultArea.setRows(5);
		resultArea.setText("Root at X =");
		getContentPane().add(resultArea);
		resultArea.setBounds(330, 580, 680, 30);

		nextIteration.setBackground(new java.awt.Color(255, 255, 255));
		nextIteration.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
		nextIteration.setForeground(new java.awt.Color(153, 153, 153));
		nextIteration.setText("Next itr.");
		nextIteration.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(204, 204, 204)));
		nextIteration.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				nextIterationActionPerformed(evt);
			}
		});
		getContentPane().add(nextIteration);
		nextIteration.setBounds(913, 495, 90, 25);
		nextIteration.setVisible(false);

		prevIteration.setBackground(new java.awt.Color(255, 255, 255));
		prevIteration.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
		prevIteration.setForeground(new java.awt.Color(153, 153, 153));
		prevIteration.setText("Prev. itr.");
		prevIteration.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(204, 204, 204)));
		prevIteration.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				prevIterationActionPerformed(evt);
			}
		});
		getContentPane().add(prevIteration);
		prevIteration.setBounds(340, 495, 90, 25);
		prevIteration.setVisible(false);

		background.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"background7.png"))); // NOI18N
		background.setText("jLabel1");
		getContentPane().add(background);
		background.setBounds(0, 0, 1370, 730);

		evaluate1.setBackground(new java.awt.Color(255, 255, 255));
		evaluate1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
		evaluate1.setForeground(new java.awt.Color(243, 128, 0));
		evaluate1.setText("Solve");
		evaluate1.setBorder(javax.swing.BorderFactory
				.createLineBorder(new java.awt.Color(243, 128, 0)));
		evaluate1.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				evaluate1ActionPerformed(evt);
			}
		});
		getContentPane().add(evaluate1);
		evaluate1.setBounds(980, 75, 70, 30);

		pack();
	}// </editor-fold>

	private void functionFieldActionPerformed(java.awt.event.ActionEvent evt)
	{
		// TODO add your handling code here:
	}

	private void newtonPolyActionPerformed(java.awt.event.ActionEvent evt)
	{
		// adjust radio button
		fixedPoint.setSelected(false);
		bisection.setSelected(false);
		falsePosition.setSelected(false);
		newtonRaphson.setSelected(false);
		secant.setSelected(false);
		newtonPoly.setSelected(true);
		lagrangePoly.setSelected(false);

		// adjust inpu labels
		initialPointLabel.setVisible(false);
		initialPtText.setVisible(false);
		finalPointLabel.setVisible(false);
		finalPtText.setVisible(false);
		percision.setVisible(false);
		precisionText.setVisible(false);
		MaximumIterations.setVisible(false);
		maxItrText.setVisible(false);
		errorLabel.setVisible(true);
		errorText.setVisible(true);
		resultErrorLabel.setVisible(true);

		// adjust chart buttons
		nextIteration.setVisible(true);
		prevIteration.setVisible(true);

		// adjust table
		jScrollPane1.setVisible(true);
		table.setVisible(true);
		addPoint.setVisible(true);
		removePoint.setVisible(true);
		tableLabel.setText("Insert Interpolating points:");
		NumOfItrs.setVisible(false);

	}

	private void fixedPointActionPerformed(java.awt.event.ActionEvent evt)
	{
		// adjust radio button
		fixedPoint.setSelected(true);
		bisection.setSelected(false);
		falsePosition.setSelected(false);
		newtonRaphson.setSelected(false);
		secant.setSelected(false);
		newtonPoly.setSelected(false);
		lagrangePoly.setSelected(false);

		// adjust inpu labels
		initialPointLabel.setVisible(true);
		initialPtText.setVisible(true);
		finalPointLabel.setVisible(false);
		finalPtText.setVisible(false);
		percision.setVisible(true);
		precisionText.setVisible(true);
		MaximumIterations.setVisible(true);
		maxItrText.setVisible(true);
		errorLabel.setVisible(false);
		errorText.setVisible(false);
		resultErrorLabel.setVisible(false);

		// adjust chart buttons
		nextIteration.setVisible(false);
		prevIteration.setVisible(false);

		// adjust table
		jScrollPane1.setVisible(true);
		table.setVisible(true);
		addPoint.setVisible(false);
		removePoint.setVisible(false);
		tableLabel.setText("Method Iterations :");
		NumOfItrs.setVisible(false);

	}

	private void bisectionActionPerformed(java.awt.event.ActionEvent evt)
	{

		// adjust radio button
		fixedPoint.setSelected(false);
		bisection.setSelected(true);
		falsePosition.setSelected(false);
		newtonRaphson.setSelected(false);
		secant.setSelected(false);
		newtonPoly.setSelected(false);
		lagrangePoly.setSelected(false);

		// adjust inpu labels
		initialPointLabel.setVisible(true);
		initialPtText.setVisible(true);
		finalPointLabel.setVisible(true);
		finalPtText.setVisible(true);
		percision.setVisible(true);
		precisionText.setVisible(true);
		MaximumIterations.setVisible(true);
		maxItrText.setVisible(true);
		errorLabel.setVisible(false);
		errorText.setVisible(false);
		resultErrorLabel.setVisible(false);

		// adjust chart buttons
		nextIteration.setVisible(true);
		prevIteration.setVisible(true);

		// adjust table
		jScrollPane1.setVisible(true);
		table.setVisible(true);
		addPoint.setVisible(false);
		removePoint.setVisible(false);
		tableLabel.setText("Method Iterations :");
		NumOfItrs.setVisible(true);

	}

	private void falsePositionActionPerformed(java.awt.event.ActionEvent evt)
	{
		// adjust radio button
		fixedPoint.setSelected(false);
		bisection.setSelected(false);
		falsePosition.setSelected(true);
		newtonRaphson.setSelected(false);
		secant.setSelected(false);
		newtonPoly.setSelected(false);
		lagrangePoly.setSelected(false);

		// adjust inpu labels
		initialPointLabel.setVisible(true);
		initialPtText.setVisible(true);
		finalPointLabel.setVisible(true);
		finalPtText.setVisible(true);
		percision.setVisible(true);
		precisionText.setVisible(true);
		MaximumIterations.setVisible(true);
		maxItrText.setVisible(true);
		errorLabel.setVisible(false);
		errorText.setVisible(false);
		resultErrorLabel.setVisible(false);

		// adjust chart buttons
		nextIteration.setVisible(false);
		prevIteration.setVisible(false);

		// adjust table
		jScrollPane1.setVisible(true);
		table.setVisible(true);
		addPoint.setVisible(false);
		removePoint.setVisible(false);
		tableLabel.setText("Method Iterations :");
		NumOfItrs.setVisible(true);

	}

	private void newtonRaphsonActionPerformed(java.awt.event.ActionEvent evt)
	{
		// adjust radio button
		fixedPoint.setSelected(false);
		bisection.setSelected(false);
		falsePosition.setSelected(false);
		newtonRaphson.setSelected(true);
		secant.setSelected(false);
		newtonPoly.setSelected(false);
		lagrangePoly.setSelected(false);

		// adjust inpu labels
		initialPointLabel.setVisible(true);
		initialPtText.setVisible(true);
		finalPointLabel.setVisible(false);
		finalPtText.setVisible(false);
		percision.setVisible(true);
		precisionText.setVisible(true);
		MaximumIterations.setVisible(true);
		maxItrText.setVisible(true);
		errorLabel.setVisible(false);
		errorText.setVisible(false);
		resultErrorLabel.setVisible(false);

		// adjust chart buttons
		nextIteration.setVisible(false);
		prevIteration.setVisible(false);

		// adjust table
		jScrollPane1.setVisible(true);
		table.setVisible(true);
		addPoint.setVisible(false);
		removePoint.setVisible(false);
		tableLabel.setText("Method Iterations :");
		NumOfItrs.setVisible(true);

	}

	private void secantActionPerformed(java.awt.event.ActionEvent evt)
	{
		// adjust radio button
		fixedPoint.setSelected(false);
		bisection.setSelected(false);
		falsePosition.setSelected(false);
		newtonRaphson.setSelected(false);
		secant.setSelected(true);
		newtonPoly.setSelected(false);
		lagrangePoly.setSelected(false);

		// adjust inpu labels
		initialPointLabel.setVisible(true);
		initialPtText.setVisible(true);
		finalPointLabel.setVisible(true);
		finalPtText.setVisible(true);
		percision.setVisible(true);
		precisionText.setVisible(true);
		MaximumIterations.setVisible(true);
		maxItrText.setVisible(true);
		errorLabel.setVisible(false);
		errorText.setVisible(false);
		resultErrorLabel.setVisible(false);

		// adjust chart buttons
		nextIteration.setVisible(false);
		prevIteration.setVisible(false);

		// adjust table
		jScrollPane1.setVisible(true);
		table.setVisible(true);
		addPoint.setVisible(false);
		removePoint.setVisible(false);
		tableLabel.setText("Method Iterations :");
		NumOfItrs.setVisible(true);

	}

	private void lagrangePolyActionPerformed(java.awt.event.ActionEvent evt)
	{
		// adjust radio button
		fixedPoint.setSelected(false);
		bisection.setSelected(false);
		falsePosition.setSelected(false);
		newtonRaphson.setSelected(false);
		secant.setSelected(false);
		newtonPoly.setSelected(false);
		lagrangePoly.setSelected(true);

		// adjust inpu labels
		initialPointLabel.setVisible(false);
		initialPtText.setVisible(false);
		finalPointLabel.setVisible(false);
		finalPtText.setVisible(false);
		percision.setVisible(false);
		precisionText.setVisible(false);
		MaximumIterations.setVisible(false);
		maxItrText.setVisible(false);
		errorLabel.setVisible(true);
		errorText.setVisible(true);
		resultErrorLabel.setVisible(true);

		// adjust chart buttons
		nextIteration.setVisible(true);
		prevIteration.setVisible(true);

		// adjust table
		jScrollPane1.setVisible(true);
		table.setVisible(true);
		addPoint.setVisible(true);
		removePoint.setVisible(true);
		tableLabel.setText("Insert Interpolating points:");
		NumOfItrs.setVisible(false);

	}

	private void initialPtTextActionPerformed(java.awt.event.ActionEvent evt)
	{
		// TODO add your handling code here:
	}

	private void maxItrTextActionPerformed(java.awt.event.ActionEvent evt)
	{
		// TODO add your handling code here:
	}

	private void prevIterationActionPerformed(java.awt.event.ActionEvent evt)
	{
		// TODO add your handling code here:
	}

	private void filereadActionPerformed(java.awt.event.ActionEvent evt)
	{
		FileReader fr = new FileReader("input.txt");
		if (newtonPoly.isSelected() || lagrangePoly.isSelected())
		{
			try
			{
				Double[][] result = fr.readPoints();
				table.setModel(new javax.swing.table.DefaultTableModel(result, new String[] { "X", "F(X)" })
				{
					Class[] types = new Class[] { java.lang.Double.class,
							java.lang.Double.class };

					public Class getColumnClass(int columnIndex)
					{
						return types[columnIndex];
					}
				});
			} catch (IOException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvalidInputException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else
		{
			try
			{
				MathematicalExpression m = fr.readFunction();
				functionField.setText(m.toString());
			} catch (IOException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvalidInputException e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void evaluateActionPerformed(java.awt.event.ActionEvent evt)
	{
		try
		{
		for (int i = 0; i < nextIteration.getActionListeners().length; i++)
		{
			nextIteration.removeActionListener(nextIteration
					.getActionListeners()[i]);
		}
		for (int i = 0; i < prevIteration.getActionListeners().length; i++)
		{
			prevIteration.removeActionListener(prevIteration
					.getActionListeners()[i]);
		}
		for (int i = 0; i < zoomIn.getActionListeners().length; i++)
		{
			zoomIn.removeActionListener(zoomIn.getActionListeners()[i]);
		}
		for (int i = 0; i < zoomOut.getActionListeners().length; i++)
		{
			zoomOut.removeActionListener(zoomOut.getActionListeners()[i]);
		}
		nextIteration.setEnabled(true);
		prevIteration.setEnabled(true);
		zoomIn.setEnabled(true);
		zoomOut.setEnabled(true);

		plottingPanel.removeAll();
		Long time = System.currentTimeMillis();
		if (!lagrangePoly.isSelected() && !newtonPoly.isSelected())
		{
			double a = 0;
			double b = 0;
			double pre = .00001;
			int itr = 50;

			try
			{
				parser = new Parser(functionField.getText());
				func = parser.parse();
				if (!bisection.isSelected())
				{
					generalPlot(func);
				}

			} catch (Exception e)
			{
				JOptionPane.showMessageDialog(null, "Invalid Function");

			}
			if (bisection.isSelected())
			{
				try
				{
					a = Double.parseDouble(initialPtText.getText());
					b = Double.parseDouble(finalPtText.getText());
					if (!precisionText.getText().equals(""))
					{
						pre = Double.parseDouble(precisionText.getText());
					}
					if (!maxItrText.getText().equals(""))
					{
						itr = Integer.parseInt(maxItrText.getText());
					}
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid Input");
				}
				try
				{
					solve = new SolveEquation(func, "bisection", a, b, itr, pre);
				} catch (BracketingException e)
				{
					JOptionPane.showMessageDialog(null,
							"The root is not in the given interval");
				} catch (overFlowException e)
				{
					JOptionPane
							.showMessageDialog(null,
									"The Algorithm didn't reach the wanted precision in the given itration number");
				}
				ArrayList<XandY> result = solve.getResult();

				int rowCount = result.size();
				int columnCount = 2;

				String[] tableHeader = new String[columnCount];
				Double[][] newTable = new Double[rowCount][columnCount];

				for (int i = 0; i < columnCount; i++)
				{
					tableHeader[i] = (String) table.getModel().getColumnName(i);
				}

				for (int i = 0; i < rowCount; i++)
				{
					newTable[i][0] = result.get(i).getX();
					newTable[i][1] = result.get(i).getY();

				}

				table.setModel(new javax.swing.table.DefaultTableModel(
						newTable, tableHeader)
				{
					Class[] types = new Class[] { java.lang.Double.class,
							java.lang.Double.class };

					public Class getColumnClass(int columnIndex)
					{
						return types[columnIndex];
					}
				});
				resultArea.setText("Root at X ="
						+ result.get(result.size() - 1).getX());
				NumOfItrs.setText("Num Of Itrs. = "
						+ solve.getNumberOfIteration() + " Itrs.");
				xData = null;
				pointer = 0;

				plotBisection(func, solve.plotBisection());

			} else if (falsePosition.isSelected())
			{
				try
				{
					a = Double.parseDouble(initialPtText.getText());
					b = Double.parseDouble(finalPtText.getText());
					if (!precisionText.getText().equals(""))
					{
						pre = Double.parseDouble(precisionText.getText());
					}
					if (!maxItrText.getText().equals(""))
					{
						itr = Integer.parseInt(maxItrText.getText());
					}
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid Input");
				}
				try
				{
					solve = new SolveEquation(func, "false", a, b, itr, pre);
				} catch (BracketingException e)
				{
					JOptionPane.showMessageDialog(null,
							"The root is not in the given interval");
				} catch (overFlowException e)
				{
					JOptionPane
							.showMessageDialog(null,
									"The Algorithm didn't reach the wanted precision in the given itration number");
				}
				ArrayList<XandY> result = solve.getResult();

				int rowCount = result.size();
				int columnCount = 2;

				String[] tableHeader = new String[columnCount];
				Double[][] newTable = new Double[rowCount][columnCount];

				for (int i = 0; i < columnCount; i++)
				{
					tableHeader[i] = (String) table.getModel().getColumnName(i);
				}

				for (int i = 0; i < rowCount; i++)
				{
					newTable[i][0] = result.get(i).getX();
					newTable[i][1] = result.get(i).getY();

				}

				table.setModel(new javax.swing.table.DefaultTableModel(
						newTable, tableHeader)
				{
					Class[] types = new Class[] { java.lang.Double.class,
							java.lang.Double.class };

					public Class getColumnClass(int columnIndex)
					{
						return types[columnIndex];
					}
				});
				resultArea.setText("Root at X ="
						+ result.get(result.size() - 1).getX());
				NumOfItrs.setText("Num Of Itrs. = "
						+ solve.getNumberOfIteration() + " Itrs.");
			} else if (secant.isSelected())
			{
				try
				{
					a = Double.parseDouble(initialPtText.getText());
					b = Double.parseDouble(finalPtText.getText());
					if (!precisionText.getText().equals(""))
					{
						pre = Double.parseDouble(precisionText.getText());
					}
					if (!maxItrText.getText().equals(""))
					{
						itr = Integer.parseInt(maxItrText.getText());
					}
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid Input");
				}
				try
				{
					solve = new SolveEquation(func, "secant", a, b, itr, pre);
				} catch (BracketingException e)
				{
					JOptionPane.showMessageDialog(null,
							"The root is not in the given interval");
					e.printStackTrace();
				} catch (overFlowException e)
				{
					JOptionPane
							.showMessageDialog(null,
									"The Algorithm didn't reach the wanted precision in the given itration number");
					e.printStackTrace();
				}
				ArrayList<XandY> result = solve.getResult();

				int rowCount = result.size();
				int columnCount = 2;

				String[] tableHeader = new String[columnCount];
				Double[][] newTable = new Double[rowCount][columnCount];

				for (int i = 0; i < columnCount; i++)
				{
					tableHeader[i] = (String) table.getModel().getColumnName(i);
				}

				for (int i = 0; i < rowCount; i++)
				{
					newTable[i][0] = result.get(i).getX();
					newTable[i][1] = result.get(i).getY();

				}

				table.setModel(new javax.swing.table.DefaultTableModel(
						newTable, tableHeader)
				{
					Class[] types = new Class[] { java.lang.Double.class,
							java.lang.Double.class };

					public Class getColumnClass(int columnIndex)
					{
						return types[columnIndex];
					}
				});
				resultArea.setText("Root at X ="
						+ result.get(result.size() - 1).getX());
				NumOfItrs.setText("Num Of Itrs. = "
						+ solve.getNumberOfIteration() + " Itrs.");

			} else if (newtonRaphson.isSelected())
			{
				try
				{
					a = Double.parseDouble(initialPtText.getText());
					if (!precisionText.getText().equals(""))
					{
						pre = Double.parseDouble(precisionText.getText());
					}
					if (!maxItrText.getText().equals(""))
					{
						itr = Integer.parseInt(maxItrText.getText());
					}
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid Input");
				}
				try
				{
					solve = new SolveEquation(func, "newton", a, itr, pre);
				} catch (BracketingException e)
				{
					JOptionPane.showMessageDialog(null,
							"The root is not in the given interval");
					e.printStackTrace();
				} catch (overFlowException e)
				{
					JOptionPane
							.showMessageDialog(null,
									"The Algorithm didn't reach the wanted precision in the given itration number");
					e.printStackTrace();
				}
				ArrayList<XandY> result = solve.getResult();

				int rowCount = result.size();
				int columnCount = 2;

				String[] tableHeader = new String[columnCount];
				Double[][] newTable = new Double[rowCount][columnCount];

				for (int i = 0; i < columnCount; i++)
				{
					tableHeader[i] = (String) table.getModel().getColumnName(i);
				}

				for (int i = 0; i < rowCount; i++)
				{
					newTable[i][0] = result.get(i).getX();
					newTable[i][1] = result.get(i).getY();

				}

				table.setModel(new javax.swing.table.DefaultTableModel(
						newTable, tableHeader)
				{
					Class[] types = new Class[] { java.lang.Double.class,
							java.lang.Double.class };

					public Class getColumnClass(int columnIndex)
					{
						return types[columnIndex];
					}
				});
				resultArea.setText("Root at X ="
						+ result.get(result.size() - 1).getX());
				NumOfItrs.setText("Num Of Itrs. = "
						+ solve.getNumberOfIteration() + " Itrs.");

			} else if (fixedPoint.isSelected())
			{
				FixedPoint fp = null;
				ArrayList<Double[]> result = new ArrayList<Double[]>();
				try
				{
					a = Double.parseDouble(initialPtText.getText());
					if (!precisionText.getText().equals(""))
					{
						pre = Double.parseDouble(precisionText.getText());
					}
					if (!maxItrText.getText().equals(""))
					{
						itr = Integer.parseInt(maxItrText.getText());
					}
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid Input");
				}
				try
				{
					fp = new FixedPoint(a, func);
					result = fp.getFixedPt();
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null,
							"Error finding the fixed point");
				}
				try
				{
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null,
							"Error finding the fixed point");
				}

				int rowCount = result.size();
				int columnCount = 2;

				String[] tableHeader = new String[columnCount];
				Double[][] newTable = new Double[rowCount][columnCount];

				for (int i = 0; i < columnCount; i++)
				{
					tableHeader[i] = (String) table.getModel().getColumnName(i);
				}

				for (int i = 0; i < rowCount; i++)
				{
					newTable[i][0] = result.get(i)[0];
					newTable[i][1] = result.get(i)[1];

				}

				table.setModel(new javax.swing.table.DefaultTableModel(
						newTable, tableHeader)
				{
					Class[] types = new Class[] { java.lang.Double.class,
							java.lang.Double.class };

					public Class getColumnClass(int columnIndex)
					{
						return types[columnIndex];
					}
				});
				if (result.size() > 0)
				{
					resultArea.setText("Fixed Point at X ="
							+ result.get(result.size() - 1)[0]);
				}
				NumOfItrs.setText("Num Of Itrs. = " + result.size() + " Itrs.");

			}
		} else if (lagrangePoly.isSelected())
		{
			int rowCount = table.getModel().getRowCount();

			double[] x = new double[rowCount];
			double[] y = new double[rowCount];
			LagrangeInterpolation lag = null;
			try
			{
				for (int i = 0; i < rowCount; i++)
				{

					x[i] = (Double) table.getModel().getValueAt(i, 0);
					y[i] = (Double) table.getModel().getValueAt(i, 1);
				}
				lag = new LagrangeInterpolation(x, y);
				resultArea.setText("The Interpolating Polynomial is P(x) ="
						+ lag.interpolate());
			} catch (Exception e)
			{
				JOptionPane.showMessageDialog(null,
						"Invalid Data in Interpolation Points");
				e.printStackTrace();
			}

			if (!functionField.getText().equals("")
					&& !errorText.getText().equals(""))
			{
				try
				{
					parser = new Parser(functionField.getText());
					func = parser.parse();
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid function");
				}
				try
				{
					double error = Double.parseDouble(errorText.getText());
					resultErrorLabel.setText("Error at Specified X ="
							+ lag.errorValue(func, error) + "");
					
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid Error value");
					e.printStackTrace();
				}

			}
			plotInterpolation(lag.getSteps(), lag.getXandY());

		} else if (newtonPoly.isSelected())
		{
			int rowCount = table.getModel().getRowCount();

			double[] x = new double[rowCount];
			double[] y = new double[rowCount];
			DividedDifference lag = null;
			try
			{
				for (int i = 0; i < rowCount; i++)
				{

					x[i] = (Double) table.getModel().getValueAt(i, 0);
					y[i] = (Double) table.getModel().getValueAt(i, 1);
				}
				lag = new DividedDifference(x, y);
				resultArea.setText("The Interpolating Polynomial is P(x) ="
						+ lag.interpolate());
			} catch (Exception e)
			{
				JOptionPane.showMessageDialog(null,
						"Invalid Data in Interpolation Points");
				e.printStackTrace();
			}

			if (!functionField.getText().equals("")
					&& !errorText.getText().equals(""))
			{
				try
				{
					parser = new Parser(functionField.getText());
					func = parser.parse();
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid function");
				}
				try
				{
					double error = Double.parseDouble(errorText.getText());
					resultErrorLabel.setText(lag.errorValue(func, error) + "");
					return;
				} catch (Exception e)
				{
					JOptionPane.showMessageDialog(null, "Invalid Error value");
				}
			}
			plotInterpolation(lag.getSteps(), lag.XandY());
		}
		ExcutionTime.setText("Excution Time = "
				+ (System.currentTimeMillis() - time) + " m.sec");
		}
		catch (Exception e) 
		{
		}
	}

	private void evaluate1ActionPerformed(java.awt.event.ActionEvent evt)
	{
		// TODO add your handling code here:
	}

	private void nextIterationActionPerformed(java.awt.event.ActionEvent evt)
	{
		// TODO add your handling code here:
	}

	private void addPointActionPerformed(java.awt.event.ActionEvent evt)
	{

		int rowCount = table.getModel().getRowCount();
		int columnCount = table.getModel().getColumnCount();

		String[] tableHeader = new String[columnCount];
		Double[][] newTable = new Double[rowCount + 1][columnCount];

		for (int i = 0; i < columnCount; i++)
		{
			tableHeader[i] = (String) table.getModel().getColumnName(i);
		}

		for (int i = 0; i < rowCount; i++)
		{
			for (int j = 0; j < columnCount; j++)
			{
				newTable[i][j] = (Double) table.getModel().getValueAt(i, j);
			}
		}

		table.setModel(new javax.swing.table.DefaultTableModel(newTable,
				tableHeader)
		{
			Class[] types = new Class[] { java.lang.Double.class,
					java.lang.Double.class };

			public Class getColumnClass(int columnIndex)
			{
				return types[columnIndex];
			}
		});

	}

	private void removePointActionPerformed(java.awt.event.ActionEvent evt)
	{
		int rowCount = table.getModel().getRowCount();
		int columnCount = table.getModel().getColumnCount();

		if (rowCount > 2)
		{
			String[] tableHeader = new String[columnCount];
			Double[][] newTable = new Double[rowCount - 1][columnCount];

			for (int i = 0; i < columnCount; i++)
			{
				tableHeader[i] = (String) table.getModel().getColumnName(i);
			}

			for (int i = 0; i < rowCount - 1; i++)
			{
				for (int j = 0; j < columnCount; j++)
				{
					newTable[i][j] = (Double) table.getModel().getValueAt(i, j);
				}
			}
			table.setModel(new javax.swing.table.DefaultTableModel(newTable,
					tableHeader)
			{
				Class[] types = new Class[] { java.lang.Double.class,
						java.lang.Double.class };

				public Class getColumnClass(int columnIndex)
				{
					return types[columnIndex];
				}
			});

		} else
		{
			JOptionPane.showMessageDialog(null,
					"At Least 2 Points must be inserted");
		}
	}

	private void zoomInActionPerformed(java.awt.event.ActionEvent evt)
	{
		// TODO add your handling code here:
	}

	private void zoomOutActionPerformed(java.awt.event.ActionEvent evt)
	{
		// TODO add your handling code here:
	}

	private void plotBisection(final MathematicalExpression function,
			final ArrayList<double[]> plotData)
	{
		pointer = 1;
		xData = plotData;

		XYDataset data = setDataSet(xData.get(0)[0], xData.get(0)[1],
				xData.get(0)[2], function);
		final JFreeChart chart = createChart("Bisection Simulation", data);

		// we hide legend and we replace it with text field
		chart.getLegend().visible = false;
		defaultRange(chart);
		final ChartPanel chartPanel = new ChartPanel(chart);
		plottingPanel.removeAll();
		plottingPanel.add(chartPanel, 0);

		prevIteration.setEnabled(false);

		// action for previous button
		nextIteration.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				XYPlot plot = (XYPlot) chart.getPlot();
				System.out.println("next pointer " + pointer);
				plot.setDataset(setDataSet(xData.get(pointer)[0],
						xData.get(pointer)[1], xData.get(pointer)[2], function));
				pointer++;
				if (pointer == plotData.size())
					nextIteration.setEnabled(false);
				if (pointer > 1)
					prevIteration.setEnabled(true);

			}
		});

		// action for previous button
		prevIteration.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				pointer = pointer - 2;
				XYPlot plot = (XYPlot) chart.getPlot();
				System.out.println("prev pointer " + pointer);
				plot.setDataset(setDataSet(xData.get(pointer)[0],
						xData.get(pointer)[1], xData.get(pointer)[2], function));
				if (pointer != plotData.size())
					nextIteration.setEnabled(true);
				if (pointer < 1)
					prevIteration.setEnabled(false);
				pointer++;
			}
		});

		zoomIn.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				chartPanel.zoomInBoth(2, 2);
			}
		});

		zoomOut.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				chartPanel.zoomOutBoth(2, 2);
			}
		});

		chartPanel.setSize(plottingPanel.getSize());
		plottingPanel.setVisible(true);

	}

	private XYDataset setDataForInterpolation(MathematicalExpression function,
			ArrayList<double[]> data)
	{

		xAxis = new double[][] { { -250, 250 }, { 0, 0 } };
		yAxis = new double[][] { { 0, 0 }, { -250, 250 } };

		double[][] func = new double[2][100];
		// X values
		for (int i = 0; i < 100; i++)
		{
			func[0][i] = (i - 50) / 9.0;
		}
		// Y values
		for (int i = 0; i < 100; i++)
		{
			func[1][i] = function.evaluateExpression(func[0][i]);
		}

		DefaultXYDataset dataset = new DefaultXYDataset();

		dataset.addSeries("x axis", xAxis);
		dataset.addSeries("y axis", yAxis);
		dataset.addSeries("function", func);

		for (int i = 0; i <= pointer + 1; i++)
		{
			dataset.addSeries("a" + i, line45(data.get(i)[0], data.get(i)[1]));
			dataset.addSeries("b" + i, line135(data.get(i)[0], data.get(i)[1]));
		}

		return dataset;
	}

	private void plotInterpolation(ArrayList<MathematicalExpression> function,
			final ArrayList<double[]> data)
	{
		interData = function;
		XYDataset dataset = setDataForInterpolation(interData.get(0), data);
		pointer = 1;
		final JFreeChart chart = createChart("Interpolating Polynomials",
				dataset);

		chart.getLegend().visible = false;
		defaultRange(chart);
		final ChartPanel chartPanel = new ChartPanel(chart);

		plottingPanel.removeAll();
		plottingPanel.add(chartPanel, 0);

		prevIteration.setEnabled(false);

		nextIteration.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				XYPlot plot = (XYPlot) chart.getPlot();
				plot.setDataset(setDataForInterpolation(
						(interData.get(pointer)), data));
				pointer++;
				if (pointer == interData.size())
					nextIteration.setEnabled(false);
				if (pointer > 1)
					prevIteration.setEnabled(true);
			}
		});

		// action for previous button
		prevIteration.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				pointer = pointer - 2;
				XYPlot plot = (XYPlot) chart.getPlot();
				plot.setDataset(setDataForInterpolation(
						(interData.get(pointer)), data));
				if (pointer != interData.size())
					nextIteration.setEnabled(true);
				if (pointer < 1)
					prevIteration.setEnabled(false);
				pointer++;
			}
		});

		// action for zoom in
		zoomIn.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				chartPanel.zoomInBoth(2, 2);
			}
		});

		zoomOut.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				chartPanel.zoomOutBoth(2, 2);
			}
		});

		chartPanel.setSize(plottingPanel.getSize());
		plottingPanel.setVisible(true);
	}

	private void generalPlot(MathematicalExpression function)
	{
		xAxis = new double[][] { { -250, 250 }, { 0, 0 } };
		yAxis = new double[][] { { 0, 0 }, { -250, 250 } };

		double[][] func = new double[2][500];
		// X values
		for (int i = 0; i < 500; i++)
		{
			func[0][i] = (i - 250) / 9.0;
		}
		// Y values
		for (int i = 0; i < 500; i++)
		{
			func[1][i] = function.evaluateExpression(func[0][i]);
		}

		DefaultXYDataset dataset = new DefaultXYDataset();

		dataset.addSeries("x axis", xAxis);
		dataset.addSeries("y axis", yAxis);
		dataset.addSeries("function", func);

		JFreeChart chart = ChartFactory.createXYLineChart("Function Plot", "x",
				"F(x)", dataset, PlotOrientation.VERTICAL, true, // Is a legend
																	// required?
				true, // Use tooltips
				true // Configure chart to generate URLs?
				);

		XYPlot plot = (XYPlot) chart.getPlot();
		plot.getRenderer().setSeriesPaint(0, Color.black);
		plot.getRenderer().setSeriesPaint(1, Color.black);
		plot.getRenderer().setSeriesPaint(2, Color.red);

		chart.getLegend().visible = false;
		defaultRange(chart);
		final ChartPanel chartPanel = new ChartPanel(chart);
		plottingPanel.removeAll();
		plottingPanel.add(chartPanel, 0);

		zoomIn.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				chartPanel.zoomInBoth(2, 2);
			}
		});

		zoomOut.addActionListener(new ActionListener()
		{

			@Override
			public void actionPerformed(ActionEvent arg0)
			{
				chartPanel.zoomOutBoth(2, 2);
			}
		});

		chartPanel.setSize(plottingPanel.getSize());
		plottingPanel.setVisible(true);

	}

	private JFreeChart defaultRange(JFreeChart chart)
	{

		XYPlot plot = (XYPlot) chart.getPlot();

		// setting initial bounds for x axis
		NumberAxis domain = (NumberAxis) plot.getDomainAxis();
		domain.setRange(-5, 5);
		// setting initial bounds for y axis (use auto range to fit all the
		// draw)
		NumberAxis range = (NumberAxis) plot.getRangeAxis();
		range.setRange(-5, 5);

		return chart;
	}

	private XYDataset setDataSet(double xOfLeftLine, double xOfRightLine,
			double xOfMiddle, MathematicalExpression function)
	{

		double minValue = Math.min(xOfRightLine, xOfLeftLine);
		double maxValue = Math.max(xOfRightLine, xOfLeftLine);

		double[][] func = new double[2][500];
		xAxis = new double[][] { { -250, 250 }, { 0, 0 } };
		yAxis = new double[][] { { 0, 0 }, { -250, 250 } };
		double[][] leftLine = new double[][] { { minValue, minValue },
				{ 0, function.evaluateExpression(minValue) } };
		double[][] rightLine = new double[][] { { maxValue, maxValue },
				{ 0, function.evaluateExpression(maxValue) } };
		double[][] middleLine = new double[][] { { xOfMiddle, xOfMiddle },
				{ 0, function.evaluateExpression(xOfMiddle) } };

		// fill func array
		for (int i = 0; i < 500; i++)
		{
			func[0][i] = (i - 250) / 9.0;
		}
		for (int i = 0; i < 500; i++)
		{
			func[1][i] = function.evaluateExpression(func[0][i]);
		}

		DefaultXYDataset dataset = new DefaultXYDataset();

		dataset.addSeries("x axis", xAxis);
		dataset.addSeries("y axis", yAxis);
		dataset.addSeries("function", func);
		dataset.addSeries("xA", leftLine);
		dataset.addSeries("xB", rightLine);
		dataset.addSeries("xC", middleLine);

		dataset.addSeries("a ",
				line45(minValue, function.evaluateExpression(minValue)));
		dataset.addSeries("b",
				line135(minValue, function.evaluateExpression(minValue)));
		dataset.addSeries("c ",
				line45(maxValue, function.evaluateExpression(maxValue)));
		dataset.addSeries("d",
				line135(maxValue, function.evaluateExpression(maxValue)));
		dataset.addSeries("e ",
				line45(xOfMiddle, function.evaluateExpression(xOfMiddle)));
		dataset.addSeries("f",
				line135(xOfMiddle, function.evaluateExpression(xOfMiddle)));

		return dataset;
	}

	private static double[][] line45(double x, double y)
	{
		double[][] line = new double[2][2];
		line[0][0] = x - (0.03);
		line[0][1] = x + (0.03);

		line[1][0] = y - (0.06);
		line[1][1] = y + (0.06);
		return line;
	}

	// point marker
	private static double[][] line135(double x, double y)
	{
		double[][] line = new double[2][2];
		line[0][0] = x - (0.03);
		line[0][1] = x + (0.03);

		line[1][0] = y + (0.06);
		line[1][1] = y - (0.06);
		return line;
	}

	/**
	 * plot the function and vertical lines
	 * 
	 * @param dataset
	 * @param xMin
	 * @param xMax
	 * @param yMin
	 * @param yMax
	 * @return
	 */
	private JFreeChart createChart(String name, XYDataset dataset)
	{
		JFreeChart chart = ChartFactory.createXYLineChart(name, "x", "F(x)",
				dataset, PlotOrientation.VERTICAL, true, // Is a legend
															// required?
				true, // Use tooltips
				true // Configure chart to generate URLs?
				);

		XYPlot plot = (XYPlot) chart.getPlot();
		plot.getRenderer().setSeriesPaint(0, Color.black); // x axis
		plot.getRenderer().setSeriesPaint(1, Color.black); // y axis
		plot.getRenderer().setSeriesPaint(2, Color.red); // function
		plot.getRenderer().setSeriesPaint(3, Color.blue); // left line
		plot.getRenderer().setSeriesPaint(4, Color.blue); // right line
		plot.getRenderer().setSeriesPaint(5, Color.yellow); // middle line

		plot.getRenderer().setSeriesPaint(6, Color.black); // point marker
		plot.getRenderer().setSeriesPaint(7, Color.black); // point marker
		plot.getRenderer().setSeriesPaint(8, Color.black); // point marker
		plot.getRenderer().setSeriesPaint(9, Color.black); // point marker
		plot.getRenderer().setSeriesPaint(10, Color.black); // point marker
		plot.getRenderer().setSeriesPaint(11, Color.black); // point marker

		return chart;
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[])
	{
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				new MainWindow().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel ExcutionTime;
	private javax.swing.JLabel MaximumIterations;
	private javax.swing.JLabel NumOfItrs;
	private javax.swing.JButton addPoint;
	private javax.swing.JLabel background;
	private javax.swing.JRadioButton bisection;
	private javax.swing.JLabel errorLabel;
	private javax.swing.JTextField errorText;
	private javax.swing.JButton evaluate;
	private javax.swing.JButton evaluate1;
	private javax.swing.JRadioButton falsePosition;
	private javax.swing.JLabel finalPointLabel;
	private javax.swing.JTextField finalPtText;
	private javax.swing.JRadioButton fixedPoint;
	private javax.swing.JLabel fixedPtLabel;
	private javax.swing.JTextField functionField;
	private javax.swing.JLabel initialPointLabel;
	private javax.swing.JTextField initialPtText;
	private javax.swing.JLabel input;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JRadioButton lagrangePoly;
	private javax.swing.JTextField maxItrText;
	private javax.swing.JRadioButton newtonPoly;
	private javax.swing.JRadioButton newtonRaphson;
	private javax.swing.JButton nextIteration;
	private javax.swing.JLabel percision;
	private javax.swing.JPanel plottingPanel;
	private javax.swing.JLabel polynomialInterpolationLabel1;
	private javax.swing.JTextField precisionText;
	private javax.swing.JButton prevIteration;
	private javax.swing.JButton removePoint;
	private javax.swing.JTextArea resultArea;
	private javax.swing.JLabel resultErrorLabel;
	private javax.swing.JLabel rootFindingLabel;
	private javax.swing.JRadioButton secant;
	private javax.swing.JTable table;
	private javax.swing.JLabel tableLabel;
	private javax.swing.JLabel tableTitle;
	private javax.swing.JButton zoomIn;
	private javax.swing.JButton zoomOut;
	private javax.swing.JButton fileread;

	// End of variables declaration

}
